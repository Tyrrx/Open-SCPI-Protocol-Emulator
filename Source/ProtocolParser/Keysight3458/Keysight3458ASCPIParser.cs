//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Dev\Open-SCPI-Adapters-Application\Source\ProtocolParser\Keysight3458\Keysight3458ASCPI.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ProtocolParser.Keysight3458A {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class Keysight3458ASCPIParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, ConfigureVoltage=5, ConfigureCurrent=6, 
		MeasureCurrent=7, MeasureVoltage=8, AC=9, DC=10, AUTO=11, MIN=12, MAX=13, 
		DEF=14, Space=15, CommaSeparator=16, QuestionMark=17, Number=18;
	public const int
		RULE_command = 0, RULE_identificationQuery = 1, RULE_readQuery = 2, RULE_abortCommand = 3, 
		RULE_configureCurrentCommand = 4, RULE_configureVoltageCommand = 5, RULE_measureCurrentQuery = 6, 
		RULE_measureVoltageQuery = 7, RULE_currentParameters = 8, RULE_voltageParameters = 9;
	public static readonly string[] ruleNames = {
		"command", "identificationQuery", "readQuery", "abortCommand", "configureCurrentCommand", 
		"configureVoltageCommand", "measureCurrentQuery", "measureVoltageQuery", 
		"currentParameters", "voltageParameters"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*IDN?'", "'READ?'", "'ABOR'", "'ABORt'", null, null, null, null, 
		"'AC'", "'DC'", "'AUTO'", "'MIN'", "'MAX'", "'DEF'", null, null, "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "ConfigureVoltage", "ConfigureCurrent", 
		"MeasureCurrent", "MeasureVoltage", "AC", "DC", "AUTO", "MIN", "MAX", 
		"DEF", "Space", "CommaSeparator", "QuestionMark", "Number"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Keysight3458ASCPI.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Keysight3458ASCPIParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Keysight3458ASCPIParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Keysight3458ASCPIParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationQueryContext identificationQuery() {
			return GetRuleContext<IdentificationQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Keysight3458ASCPIParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReadQueryContext readQuery() {
			return GetRuleContext<ReadQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbortCommandContext abortCommand() {
			return GetRuleContext<AbortCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigureCurrentCommandContext configureCurrentCommand() {
			return GetRuleContext<ConfigureCurrentCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeasureCurrentQueryContext measureCurrentQuery() {
			return GetRuleContext<MeasureCurrentQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigureVoltageCommandContext configureVoltageCommand() {
			return GetRuleContext<ConfigureVoltageCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeasureVoltageQueryContext measureVoltageQuery() {
			return GetRuleContext<MeasureVoltageQueryContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 41;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 20;
				identificationQuery();
				State = 21;
				Match(Eof);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 23;
				readQuery();
				State = 24;
				Match(Eof);
				}
				break;
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 26;
				abortCommand();
				State = 27;
				Match(Eof);
				}
				break;
			case ConfigureCurrent:
				EnterOuterAlt(_localctx, 4);
				{
				State = 29;
				configureCurrentCommand();
				State = 30;
				Match(Eof);
				}
				break;
			case MeasureCurrent:
				EnterOuterAlt(_localctx, 5);
				{
				State = 32;
				measureCurrentQuery();
				State = 33;
				Match(Eof);
				}
				break;
			case ConfigureVoltage:
				EnterOuterAlt(_localctx, 6);
				{
				State = 35;
				configureVoltageCommand();
				State = 36;
				Match(Eof);
				}
				break;
			case MeasureVoltage:
				EnterOuterAlt(_localctx, 7);
				{
				State = 38;
				measureVoltageQuery();
				State = 39;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentificationQueryContext : ParserRuleContext {
		public IdentificationQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identificationQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificationQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentificationQueryContext identificationQuery() {
		IdentificationQueryContext _localctx = new IdentificationQueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_identificationQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 43;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadQueryContext : ParserRuleContext {
		public ReadQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadQueryContext readQuery() {
		ReadQueryContext _localctx = new ReadQueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_readQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbortCommandContext : ParserRuleContext {
		public AbortCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abortCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbortCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbortCommandContext abortCommand() {
		AbortCommandContext _localctx = new AbortCommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_abortCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 47;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigureCurrentCommandContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConfigureCurrent() { return GetToken(Keysight3458ASCPIParser.ConfigureCurrent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight3458ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight3458ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight3458ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentParametersContext currentParameters() {
			return GetRuleContext<CurrentParametersContext>(0);
		}
		public ConfigureCurrentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configureCurrentCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigureCurrentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigureCurrentCommandContext configureCurrentCommand() {
		ConfigureCurrentCommandContext _localctx = new ConfigureCurrentCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_configureCurrentCommand);
		int _la;
		try {
			State = 55;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 49;
				Match(ConfigureCurrent);
				State = 50;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 51;
				Match(ConfigureCurrent);
				State = 52;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 53;
				Match(Space);
				State = 54;
				currentParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigureVoltageCommandContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConfigureVoltage() { return GetToken(Keysight3458ASCPIParser.ConfigureVoltage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight3458ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight3458ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight3458ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VoltageParametersContext voltageParameters() {
			return GetRuleContext<VoltageParametersContext>(0);
		}
		public ConfigureVoltageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configureVoltageCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigureVoltageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigureVoltageCommandContext configureVoltageCommand() {
		ConfigureVoltageCommandContext _localctx = new ConfigureVoltageCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_configureVoltageCommand);
		int _la;
		try {
			State = 63;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 57;
				Match(ConfigureVoltage);
				State = 58;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 59;
				Match(ConfigureVoltage);
				State = 60;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 61;
				Match(Space);
				State = 62;
				voltageParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasureCurrentQueryContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MeasureCurrent() { return GetToken(Keysight3458ASCPIParser.MeasureCurrent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(Keysight3458ASCPIParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight3458ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight3458ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight3458ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentParametersContext currentParameters() {
			return GetRuleContext<CurrentParametersContext>(0);
		}
		public MeasureCurrentQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measureCurrentQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasureCurrentQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasureCurrentQueryContext measureCurrentQuery() {
		MeasureCurrentQueryContext _localctx = new MeasureCurrentQueryContext(Context, State);
		EnterRule(_localctx, 12, RULE_measureCurrentQuery);
		int _la;
		try {
			State = 73;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 65;
				Match(MeasureCurrent);
				State = 66;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 67;
				Match(QuestionMark);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 68;
				Match(MeasureCurrent);
				State = 69;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 70;
				Match(QuestionMark);
				State = 71;
				Match(Space);
				State = 72;
				currentParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasureVoltageQueryContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MeasureVoltage() { return GetToken(Keysight3458ASCPIParser.MeasureVoltage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(Keysight3458ASCPIParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight3458ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight3458ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight3458ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VoltageParametersContext voltageParameters() {
			return GetRuleContext<VoltageParametersContext>(0);
		}
		public MeasureVoltageQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measureVoltageQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasureVoltageQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasureVoltageQueryContext measureVoltageQuery() {
		MeasureVoltageQueryContext _localctx = new MeasureVoltageQueryContext(Context, State);
		EnterRule(_localctx, 14, RULE_measureVoltageQuery);
		int _la;
		try {
			State = 83;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 75;
				Match(MeasureVoltage);
				State = 76;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 77;
				Match(QuestionMark);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 78;
				Match(MeasureVoltage);
				State = 79;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 80;
				Match(QuestionMark);
				State = 81;
				Match(Space);
				State = 82;
				voltageParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentParametersContext : ParserRuleContext {
		public IToken range;
		public IToken resolution;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(Keysight3458ASCPIParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(Keysight3458ASCPIParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(Keysight3458ASCPIParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MIN() { return GetTokens(Keysight3458ASCPIParser.MIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN(int i) {
			return GetToken(Keysight3458ASCPIParser.MIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX() { return GetTokens(Keysight3458ASCPIParser.MAX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX(int i) {
			return GetToken(Keysight3458ASCPIParser.MAX, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEF() { return GetTokens(Keysight3458ASCPIParser.DEF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF(int i) {
			return GetToken(Keysight3458ASCPIParser.DEF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeparator() { return GetToken(Keysight3458ASCPIParser.CommaSeparator, 0); }
		public CurrentParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentParametersContext currentParameters() {
		CurrentParametersContext _localctx = new CurrentParametersContext(Context, State);
		EnterRule(_localctx, 16, RULE_currentParameters);
		int _la;
		try {
			State = 89;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 85;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 86;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 87;
				Match(CommaSeparator);
				State = 88;
				_localctx.resolution = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.resolution = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoltageParametersContext : ParserRuleContext {
		public IToken range;
		public IToken resolution;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(Keysight3458ASCPIParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(Keysight3458ASCPIParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(Keysight3458ASCPIParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MIN() { return GetTokens(Keysight3458ASCPIParser.MIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN(int i) {
			return GetToken(Keysight3458ASCPIParser.MIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX() { return GetTokens(Keysight3458ASCPIParser.MAX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX(int i) {
			return GetToken(Keysight3458ASCPIParser.MAX, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEF() { return GetTokens(Keysight3458ASCPIParser.DEF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF(int i) {
			return GetToken(Keysight3458ASCPIParser.DEF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeparator() { return GetToken(Keysight3458ASCPIParser.CommaSeparator, 0); }
		public VoltageParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voltageParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight3458ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight3458ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoltageParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoltageParametersContext voltageParameters() {
		VoltageParametersContext _localctx = new VoltageParametersContext(Context, State);
		EnterRule(_localctx, 18, RULE_voltageParameters);
		int _la;
		try {
			State = 95;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 91;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 92;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 93;
				Match(CommaSeparator);
				State = 94;
				_localctx.resolution = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.resolution = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x14', '\x64', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', 
		'\x3', '\x2', '\x5', '\x2', ',', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', 
		'\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', 
		'\x5', '\x6', ':', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', 
		'\x3', '\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', '\x42', '\n', '\a', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x5', '\b', 'L', '\n', '\b', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x3', '\t', '\x5', '\t', 'V', '\n', '\t', '\x3', '\n', '\x3', '\n', 
		'\x3', '\n', '\x3', '\n', '\x5', '\n', '\\', '\n', '\n', '\x3', '\v', 
		'\x3', '\v', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x62', '\n', '\v', 
		'\x3', '\v', '\x2', '\x2', '\f', '\x2', '\x4', '\x6', '\b', '\n', '\f', 
		'\xE', '\x10', '\x12', '\x14', '\x2', '\x6', '\x3', '\x2', '\x5', '\x6', 
		'\x3', '\x2', '\v', '\f', '\x4', '\x2', '\r', '\x10', '\x14', '\x14', 
		'\x4', '\x2', '\xE', '\x10', '\x14', '\x14', '\x2', '\x65', '\x2', '+', 
		'\x3', '\x2', '\x2', '\x2', '\x4', '-', '\x3', '\x2', '\x2', '\x2', '\x6', 
		'/', '\x3', '\x2', '\x2', '\x2', '\b', '\x31', '\x3', '\x2', '\x2', '\x2', 
		'\n', '\x39', '\x3', '\x2', '\x2', '\x2', '\f', '\x41', '\x3', '\x2', 
		'\x2', '\x2', '\xE', 'K', '\x3', '\x2', '\x2', '\x2', '\x10', 'U', '\x3', 
		'\x2', '\x2', '\x2', '\x12', '[', '\x3', '\x2', '\x2', '\x2', '\x14', 
		'\x61', '\x3', '\x2', '\x2', '\x2', '\x16', '\x17', '\x5', '\x4', '\x3', 
		'\x2', '\x17', '\x18', '\a', '\x2', '\x2', '\x3', '\x18', ',', '\x3', 
		'\x2', '\x2', '\x2', '\x19', '\x1A', '\x5', '\x6', '\x4', '\x2', '\x1A', 
		'\x1B', '\a', '\x2', '\x2', '\x3', '\x1B', ',', '\x3', '\x2', '\x2', '\x2', 
		'\x1C', '\x1D', '\x5', '\b', '\x5', '\x2', '\x1D', '\x1E', '\a', '\x2', 
		'\x2', '\x3', '\x1E', ',', '\x3', '\x2', '\x2', '\x2', '\x1F', ' ', '\x5', 
		'\n', '\x6', '\x2', ' ', '!', '\a', '\x2', '\x2', '\x3', '!', ',', '\x3', 
		'\x2', '\x2', '\x2', '\"', '#', '\x5', '\xE', '\b', '\x2', '#', '$', '\a', 
		'\x2', '\x2', '\x3', '$', ',', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x5', 
		'\f', '\a', '\x2', '&', '\'', '\a', '\x2', '\x2', '\x3', '\'', ',', '\x3', 
		'\x2', '\x2', '\x2', '(', ')', '\x5', '\x10', '\t', '\x2', ')', '*', '\a', 
		'\x2', '\x2', '\x3', '*', ',', '\x3', '\x2', '\x2', '\x2', '+', '\x16', 
		'\x3', '\x2', '\x2', '\x2', '+', '\x19', '\x3', '\x2', '\x2', '\x2', '+', 
		'\x1C', '\x3', '\x2', '\x2', '\x2', '+', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', '+', '\"', '\x3', '\x2', '\x2', '\x2', '+', '%', '\x3', '\x2', 
		'\x2', '\x2', '+', '(', '\x3', '\x2', '\x2', '\x2', ',', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '-', '.', '\a', '\x3', '\x2', '\x2', '.', '\x5', 
		'\x3', '\x2', '\x2', '\x2', '/', '\x30', '\a', '\x4', '\x2', '\x2', '\x30', 
		'\a', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', '\t', '\x2', '\x2', 
		'\x2', '\x32', '\t', '\x3', '\x2', '\x2', '\x2', '\x33', '\x34', '\a', 
		'\b', '\x2', '\x2', '\x34', ':', '\t', '\x3', '\x2', '\x2', '\x35', '\x36', 
		'\a', '\b', '\x2', '\x2', '\x36', '\x37', '\t', '\x3', '\x2', '\x2', '\x37', 
		'\x38', '\a', '\x11', '\x2', '\x2', '\x38', ':', '\x5', '\x12', '\n', 
		'\x2', '\x39', '\x33', '\x3', '\x2', '\x2', '\x2', '\x39', '\x35', '\x3', 
		'\x2', '\x2', '\x2', ':', '\v', '\x3', '\x2', '\x2', '\x2', ';', '<', 
		'\a', '\a', '\x2', '\x2', '<', '\x42', '\t', '\x3', '\x2', '\x2', '=', 
		'>', '\a', '\a', '\x2', '\x2', '>', '?', '\t', '\x3', '\x2', '\x2', '?', 
		'@', '\a', '\x11', '\x2', '\x2', '@', '\x42', '\x5', '\x14', '\v', '\x2', 
		'\x41', ';', '\x3', '\x2', '\x2', '\x2', '\x41', '=', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\r', '\x3', '\x2', '\x2', '\x2', '\x43', '\x44', '\a', 
		'\t', '\x2', '\x2', '\x44', '\x45', '\t', '\x3', '\x2', '\x2', '\x45', 
		'L', '\a', '\x13', '\x2', '\x2', '\x46', 'G', '\a', '\t', '\x2', '\x2', 
		'G', 'H', '\t', '\x3', '\x2', '\x2', 'H', 'I', '\a', '\x13', '\x2', '\x2', 
		'I', 'J', '\a', '\x11', '\x2', '\x2', 'J', 'L', '\x5', '\x12', '\n', '\x2', 
		'K', '\x43', '\x3', '\x2', '\x2', '\x2', 'K', '\x46', '\x3', '\x2', '\x2', 
		'\x2', 'L', '\xF', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\a', '\n', '\x2', 
		'\x2', 'N', 'O', '\t', '\x3', '\x2', '\x2', 'O', 'V', '\a', '\x13', '\x2', 
		'\x2', 'P', 'Q', '\a', '\n', '\x2', '\x2', 'Q', 'R', '\t', '\x3', '\x2', 
		'\x2', 'R', 'S', '\a', '\x13', '\x2', '\x2', 'S', 'T', '\a', '\x11', '\x2', 
		'\x2', 'T', 'V', '\x5', '\x14', '\v', '\x2', 'U', 'M', '\x3', '\x2', '\x2', 
		'\x2', 'U', 'P', '\x3', '\x2', '\x2', '\x2', 'V', '\x11', '\x3', '\x2', 
		'\x2', '\x2', 'W', '\\', '\t', '\x4', '\x2', '\x2', 'X', 'Y', '\t', '\x4', 
		'\x2', '\x2', 'Y', 'Z', '\a', '\x12', '\x2', '\x2', 'Z', '\\', '\t', '\x5', 
		'\x2', '\x2', '[', 'W', '\x3', '\x2', '\x2', '\x2', '[', 'X', '\x3', '\x2', 
		'\x2', '\x2', '\\', '\x13', '\x3', '\x2', '\x2', '\x2', ']', '\x62', '\t', 
		'\x4', '\x2', '\x2', '^', '_', '\t', '\x4', '\x2', '\x2', '_', '`', '\a', 
		'\x12', '\x2', '\x2', '`', '\x62', '\t', '\x5', '\x2', '\x2', '\x61', 
		']', '\x3', '\x2', '\x2', '\x2', '\x61', '^', '\x3', '\x2', '\x2', '\x2', 
		'\x62', '\x15', '\x3', '\x2', '\x2', '\x2', '\t', '+', '\x39', '\x41', 
		'K', 'U', '[', '\x61',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ProtocolParser.Keysight3458A
