//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.9.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Develop\Open-SCPI-Protocol-Emulator\ProtocolParser\Keysight34465A\Keysight34465ASCPI.g4 by ANTLR 4.9.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace ProtocolParser.Keysight34465A {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.9.1")]
[System.CLSCompliant(false)]
public partial class Keysight34465ASCPIParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, ConfigureVoltage=5, ConfigureCurrent=6, 
		MeasureCurrent=7, MeasureVoltage=8, DisplayText=9, DisplayTextClear=10, 
		SenseVoltageImpedance=11, AC=12, DC=13, AUTO=14, MIN=15, MAX=16, DEF=17, 
		Space=18, CommaSeparator=19, QuestionMark=20, AutoTRUE=21, AutoFALSE=22, 
		Number=23, QuotedString=24;
	public const int
		RULE_command = 0, RULE_identificationQuery = 1, RULE_readQuery = 2, RULE_abortCommand = 3, 
		RULE_configureCurrentCommand = 4, RULE_configureVoltageCommand = 5, RULE_measureCurrentQuery = 6, 
		RULE_measureVoltageQuery = 7, RULE_displayTextCommand = 8, RULE_displayTextClearCommand = 9, 
		RULE_senseVoltageImpedanceCommand = 10, RULE_currentParameters = 11, RULE_voltageParameters = 12;
	public static readonly string[] ruleNames = {
		"command", "identificationQuery", "readQuery", "abortCommand", "configureCurrentCommand", 
		"configureVoltageCommand", "measureCurrentQuery", "measureVoltageQuery", 
		"displayTextCommand", "displayTextClearCommand", "senseVoltageImpedanceCommand", 
		"currentParameters", "voltageParameters"
	};

	private static readonly string[] _LiteralNames = {
		null, "'*IDN?'", "'READ?'", "'ABOR'", "'ABORt'", null, null, null, null, 
		null, null, null, "'AC'", "'DC'", "'AUTO'", "'MIN'", "'MAX'", "'DEF'", 
		null, null, "'?'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, "ConfigureVoltage", "ConfigureCurrent", 
		"MeasureCurrent", "MeasureVoltage", "DisplayText", "DisplayTextClear", 
		"SenseVoltageImpedance", "AC", "DC", "AUTO", "MIN", "MAX", "DEF", "Space", 
		"CommaSeparator", "QuestionMark", "AutoTRUE", "AutoFALSE", "Number", "QuotedString"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Keysight34465ASCPI.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static Keysight34465ASCPIParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public Keysight34465ASCPIParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public Keysight34465ASCPIParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class CommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public IdentificationQueryContext identificationQuery() {
			return GetRuleContext<IdentificationQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(Keysight34465ASCPIParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ReadQueryContext readQuery() {
			return GetRuleContext<ReadQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AbortCommandContext abortCommand() {
			return GetRuleContext<AbortCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigureCurrentCommandContext configureCurrentCommand() {
			return GetRuleContext<ConfigureCurrentCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeasureCurrentQueryContext measureCurrentQuery() {
			return GetRuleContext<MeasureCurrentQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConfigureVoltageCommandContext configureVoltageCommand() {
			return GetRuleContext<ConfigureVoltageCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public MeasureVoltageQueryContext measureVoltageQuery() {
			return GetRuleContext<MeasureVoltageQueryContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextCommandContext displayTextCommand() {
			return GetRuleContext<DisplayTextCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DisplayTextClearCommandContext displayTextClearCommand() {
			return GetRuleContext<DisplayTextClearCommandContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public SenseVoltageImpedanceCommandContext senseVoltageImpedanceCommand() {
			return GetRuleContext<SenseVoltageImpedanceCommandContext>(0);
		}
		public CommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_command; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CommandContext command() {
		CommandContext _localctx = new CommandContext(Context, State);
		EnterRule(_localctx, 0, RULE_command);
		try {
			State = 56;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
				EnterOuterAlt(_localctx, 1);
				{
				State = 26;
				identificationQuery();
				State = 27;
				Match(Eof);
				}
				break;
			case T__1:
				EnterOuterAlt(_localctx, 2);
				{
				State = 29;
				readQuery();
				State = 30;
				Match(Eof);
				}
				break;
			case T__2:
			case T__3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 32;
				abortCommand();
				State = 33;
				Match(Eof);
				}
				break;
			case ConfigureCurrent:
				EnterOuterAlt(_localctx, 4);
				{
				State = 35;
				configureCurrentCommand();
				State = 36;
				Match(Eof);
				}
				break;
			case MeasureCurrent:
				EnterOuterAlt(_localctx, 5);
				{
				State = 38;
				measureCurrentQuery();
				State = 39;
				Match(Eof);
				}
				break;
			case ConfigureVoltage:
				EnterOuterAlt(_localctx, 6);
				{
				State = 41;
				configureVoltageCommand();
				State = 42;
				Match(Eof);
				}
				break;
			case MeasureVoltage:
				EnterOuterAlt(_localctx, 7);
				{
				State = 44;
				measureVoltageQuery();
				State = 45;
				Match(Eof);
				}
				break;
			case DisplayText:
				EnterOuterAlt(_localctx, 8);
				{
				State = 47;
				displayTextCommand();
				State = 48;
				Match(Eof);
				}
				break;
			case DisplayTextClear:
				EnterOuterAlt(_localctx, 9);
				{
				State = 50;
				displayTextClearCommand();
				State = 51;
				Match(Eof);
				}
				break;
			case SenseVoltageImpedance:
				EnterOuterAlt(_localctx, 10);
				{
				State = 53;
				senseVoltageImpedanceCommand();
				State = 54;
				Match(Eof);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentificationQueryContext : ParserRuleContext {
		public IdentificationQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identificationQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentificationQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdentificationQueryContext identificationQuery() {
		IdentificationQueryContext _localctx = new IdentificationQueryContext(Context, State);
		EnterRule(_localctx, 2, RULE_identificationQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 58;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReadQueryContext : ParserRuleContext {
		public ReadQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_readQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReadQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReadQueryContext readQuery() {
		ReadQueryContext _localctx = new ReadQueryContext(Context, State);
		EnterRule(_localctx, 4, RULE_readQuery);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 60;
			Match(T__1);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AbortCommandContext : ParserRuleContext {
		public AbortCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_abortCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAbortCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AbortCommandContext abortCommand() {
		AbortCommandContext _localctx = new AbortCommandContext(Context, State);
		EnterRule(_localctx, 6, RULE_abortCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 62;
			_la = TokenStream.LA(1);
			if ( !(_la==T__2 || _la==T__3) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigureCurrentCommandContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConfigureCurrent() { return GetToken(Keysight34465ASCPIParser.ConfigureCurrent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight34465ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight34465ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight34465ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentParametersContext currentParameters() {
			return GetRuleContext<CurrentParametersContext>(0);
		}
		public ConfigureCurrentCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configureCurrentCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigureCurrentCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigureCurrentCommandContext configureCurrentCommand() {
		ConfigureCurrentCommandContext _localctx = new ConfigureCurrentCommandContext(Context, State);
		EnterRule(_localctx, 8, RULE_configureCurrentCommand);
		int _la;
		try {
			State = 70;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 64;
				Match(ConfigureCurrent);
				State = 65;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 66;
				Match(ConfigureCurrent);
				State = 67;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 68;
				Match(Space);
				State = 69;
				currentParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConfigureVoltageCommandContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ConfigureVoltage() { return GetToken(Keysight34465ASCPIParser.ConfigureVoltage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight34465ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight34465ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight34465ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VoltageParametersContext voltageParameters() {
			return GetRuleContext<VoltageParametersContext>(0);
		}
		public ConfigureVoltageCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_configureVoltageCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConfigureVoltageCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConfigureVoltageCommandContext configureVoltageCommand() {
		ConfigureVoltageCommandContext _localctx = new ConfigureVoltageCommandContext(Context, State);
		EnterRule(_localctx, 10, RULE_configureVoltageCommand);
		int _la;
		try {
			State = 78;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,2,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 72;
				Match(ConfigureVoltage);
				State = 73;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 74;
				Match(ConfigureVoltage);
				State = 75;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 76;
				Match(Space);
				State = 77;
				voltageParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasureCurrentQueryContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MeasureCurrent() { return GetToken(Keysight34465ASCPIParser.MeasureCurrent, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(Keysight34465ASCPIParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight34465ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight34465ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight34465ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public CurrentParametersContext currentParameters() {
			return GetRuleContext<CurrentParametersContext>(0);
		}
		public MeasureCurrentQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measureCurrentQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasureCurrentQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasureCurrentQueryContext measureCurrentQuery() {
		MeasureCurrentQueryContext _localctx = new MeasureCurrentQueryContext(Context, State);
		EnterRule(_localctx, 12, RULE_measureCurrentQuery);
		int _la;
		try {
			State = 88;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,3,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 80;
				Match(MeasureCurrent);
				State = 81;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 82;
				Match(QuestionMark);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 83;
				Match(MeasureCurrent);
				State = 84;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 85;
				Match(QuestionMark);
				State = 86;
				Match(Space);
				State = 87;
				currentParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class MeasureVoltageQueryContext : ParserRuleContext {
		public IToken electricityType;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MeasureVoltage() { return GetToken(Keysight34465ASCPIParser.MeasureVoltage, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuestionMark() { return GetToken(Keysight34465ASCPIParser.QuestionMark, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AC() { return GetToken(Keysight34465ASCPIParser.AC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DC() { return GetToken(Keysight34465ASCPIParser.DC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight34465ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public VoltageParametersContext voltageParameters() {
			return GetRuleContext<VoltageParametersContext>(0);
		}
		public MeasureVoltageQueryContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_measureVoltageQuery; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMeasureVoltageQuery(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MeasureVoltageQueryContext measureVoltageQuery() {
		MeasureVoltageQueryContext _localctx = new MeasureVoltageQueryContext(Context, State);
		EnterRule(_localctx, 14, RULE_measureVoltageQuery);
		int _la;
		try {
			State = 98;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 90;
				Match(MeasureVoltage);
				State = 91;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 92;
				Match(QuestionMark);
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 93;
				Match(MeasureVoltage);
				State = 94;
				_localctx.electricityType = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !(_la==AC || _la==DC) ) {
					_localctx.electricityType = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 95;
				Match(QuestionMark);
				State = 96;
				Match(Space);
				State = 97;
				voltageParameters();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayTextCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DisplayText() { return GetToken(Keysight34465ASCPIParser.DisplayText, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Space() { return GetToken(Keysight34465ASCPIParser.Space, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QuotedString() { return GetToken(Keysight34465ASCPIParser.QuotedString, 0); }
		public DisplayTextCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayTextCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayTextCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayTextCommandContext displayTextCommand() {
		DisplayTextCommandContext _localctx = new DisplayTextCommandContext(Context, State);
		EnterRule(_localctx, 16, RULE_displayTextCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 100;
			Match(DisplayText);
			State = 101;
			Match(Space);
			State = 102;
			Match(QuotedString);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DisplayTextClearCommandContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DisplayTextClear() { return GetToken(Keysight34465ASCPIParser.DisplayTextClear, 0); }
		public DisplayTextClearCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_displayTextClearCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDisplayTextClearCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DisplayTextClearCommandContext displayTextClearCommand() {
		DisplayTextClearCommandContext _localctx = new DisplayTextClearCommandContext(Context, State);
		EnterRule(_localctx, 18, RULE_displayTextClearCommand);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 104;
			Match(DisplayTextClear);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SenseVoltageImpedanceCommandContext : ParserRuleContext {
		public IToken @bool;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SenseVoltageImpedance() { return GetToken(Keysight34465ASCPIParser.SenseVoltageImpedance, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AutoTRUE() { return GetToken(Keysight34465ASCPIParser.AutoTRUE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AutoFALSE() { return GetToken(Keysight34465ASCPIParser.AutoFALSE, 0); }
		public SenseVoltageImpedanceCommandContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_senseVoltageImpedanceCommand; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSenseVoltageImpedanceCommand(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SenseVoltageImpedanceCommandContext senseVoltageImpedanceCommand() {
		SenseVoltageImpedanceCommandContext _localctx = new SenseVoltageImpedanceCommandContext(Context, State);
		EnterRule(_localctx, 20, RULE_senseVoltageImpedanceCommand);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 106;
			Match(SenseVoltageImpedance);
			State = 107;
			_localctx.@bool = TokenStream.LT(1);
			_la = TokenStream.LA(1);
			if ( !(_la==AutoTRUE || _la==AutoFALSE) ) {
				_localctx.@bool = ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CurrentParametersContext : ParserRuleContext {
		public IToken range;
		public IToken resolution;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(Keysight34465ASCPIParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(Keysight34465ASCPIParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(Keysight34465ASCPIParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MIN() { return GetTokens(Keysight34465ASCPIParser.MIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN(int i) {
			return GetToken(Keysight34465ASCPIParser.MIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX() { return GetTokens(Keysight34465ASCPIParser.MAX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX(int i) {
			return GetToken(Keysight34465ASCPIParser.MAX, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEF() { return GetTokens(Keysight34465ASCPIParser.DEF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF(int i) {
			return GetToken(Keysight34465ASCPIParser.DEF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeparator() { return GetToken(Keysight34465ASCPIParser.CommaSeparator, 0); }
		public CurrentParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_currentParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCurrentParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CurrentParametersContext currentParameters() {
		CurrentParametersContext _localctx = new CurrentParametersContext(Context, State);
		EnterRule(_localctx, 22, RULE_currentParameters);
		int _la;
		try {
			State = 113;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 109;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 110;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 111;
				Match(CommaSeparator);
				State = 112;
				_localctx.resolution = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.resolution = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VoltageParametersContext : ParserRuleContext {
		public IToken range;
		public IToken resolution;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] Number() { return GetTokens(Keysight34465ASCPIParser.Number); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Number(int i) {
			return GetToken(Keysight34465ASCPIParser.Number, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AUTO() { return GetToken(Keysight34465ASCPIParser.AUTO, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MIN() { return GetTokens(Keysight34465ASCPIParser.MIN); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MIN(int i) {
			return GetToken(Keysight34465ASCPIParser.MIN, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] MAX() { return GetTokens(Keysight34465ASCPIParser.MAX); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MAX(int i) {
			return GetToken(Keysight34465ASCPIParser.MAX, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] DEF() { return GetTokens(Keysight34465ASCPIParser.DEF); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DEF(int i) {
			return GetToken(Keysight34465ASCPIParser.DEF, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CommaSeparator() { return GetToken(Keysight34465ASCPIParser.CommaSeparator, 0); }
		public VoltageParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_voltageParameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IKeysight34465ASCPIVisitor<TResult> typedVisitor = visitor as IKeysight34465ASCPIVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitVoltageParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VoltageParametersContext voltageParameters() {
		VoltageParametersContext _localctx = new VoltageParametersContext(Context, State);
		EnterRule(_localctx, 24, RULE_voltageParameters);
		int _la;
		try {
			State = 119;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,6,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 115;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 116;
				_localctx.range = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << AUTO) | (1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.range = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				State = 117;
				Match(CommaSeparator);
				State = 118;
				_localctx.resolution = TokenStream.LT(1);
				_la = TokenStream.LA(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MIN) | (1L << MAX) | (1L << DEF) | (1L << Number))) != 0)) ) {
					_localctx.resolution = ErrorHandler.RecoverInline(this);
				}
				else {
					ErrorHandler.ReportMatch(this);
				    Consume();
				}
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x1A', '|', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x5', '\x2', ';', '\n', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', 'I', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x5', '\a', 'Q', '\n', '\a', '\x3', '\b', 
		'\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', 
		'\b', '\x3', '\b', '\x5', '\b', '[', '\n', '\b', '\x3', '\t', '\x3', '\t', 
		'\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x3', 
		'\t', '\x5', '\t', '\x65', '\n', '\t', '\x3', '\n', '\x3', '\n', '\x3', 
		'\n', '\x3', '\n', '\x3', '\v', '\x3', '\v', '\x3', '\f', '\x3', '\f', 
		'\x3', '\f', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x3', '\r', '\x5', 
		'\r', 't', '\n', '\r', '\x3', '\xE', '\x3', '\xE', '\x3', '\xE', '\x3', 
		'\xE', '\x5', '\xE', 'z', '\n', '\xE', '\x3', '\xE', '\x2', '\x2', '\xF', 
		'\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', 
		'\x16', '\x18', '\x1A', '\x2', '\a', '\x3', '\x2', '\x5', '\x6', '\x3', 
		'\x2', '\xE', '\xF', '\x3', '\x2', '\x17', '\x18', '\x4', '\x2', '\x10', 
		'\x13', '\x19', '\x19', '\x4', '\x2', '\x11', '\x13', '\x19', '\x19', 
		'\x2', '}', '\x2', ':', '\x3', '\x2', '\x2', '\x2', '\x4', '<', '\x3', 
		'\x2', '\x2', '\x2', '\x6', '>', '\x3', '\x2', '\x2', '\x2', '\b', '@', 
		'\x3', '\x2', '\x2', '\x2', '\n', 'H', '\x3', '\x2', '\x2', '\x2', '\f', 
		'P', '\x3', '\x2', '\x2', '\x2', '\xE', 'Z', '\x3', '\x2', '\x2', '\x2', 
		'\x10', '\x64', '\x3', '\x2', '\x2', '\x2', '\x12', '\x66', '\x3', '\x2', 
		'\x2', '\x2', '\x14', 'j', '\x3', '\x2', '\x2', '\x2', '\x16', 'l', '\x3', 
		'\x2', '\x2', '\x2', '\x18', 's', '\x3', '\x2', '\x2', '\x2', '\x1A', 
		'y', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1D', '\x5', '\x4', '\x3', 
		'\x2', '\x1D', '\x1E', '\a', '\x2', '\x2', '\x3', '\x1E', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x1F', ' ', '\x5', '\x6', '\x4', '\x2', ' ', '!', 
		'\a', '\x2', '\x2', '\x3', '!', ';', '\x3', '\x2', '\x2', '\x2', '\"', 
		'#', '\x5', '\b', '\x5', '\x2', '#', '$', '\a', '\x2', '\x2', '\x3', '$', 
		';', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x5', '\n', '\x6', '\x2', 
		'&', '\'', '\a', '\x2', '\x2', '\x3', '\'', ';', '\x3', '\x2', '\x2', 
		'\x2', '(', ')', '\x5', '\xE', '\b', '\x2', ')', '*', '\a', '\x2', '\x2', 
		'\x3', '*', ';', '\x3', '\x2', '\x2', '\x2', '+', ',', '\x5', '\f', '\a', 
		'\x2', ',', '-', '\a', '\x2', '\x2', '\x3', '-', ';', '\x3', '\x2', '\x2', 
		'\x2', '.', '/', '\x5', '\x10', '\t', '\x2', '/', '\x30', '\a', '\x2', 
		'\x2', '\x3', '\x30', ';', '\x3', '\x2', '\x2', '\x2', '\x31', '\x32', 
		'\x5', '\x12', '\n', '\x2', '\x32', '\x33', '\a', '\x2', '\x2', '\x3', 
		'\x33', ';', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\x5', '\x14', 
		'\v', '\x2', '\x35', '\x36', '\a', '\x2', '\x2', '\x3', '\x36', ';', '\x3', 
		'\x2', '\x2', '\x2', '\x37', '\x38', '\x5', '\x16', '\f', '\x2', '\x38', 
		'\x39', '\a', '\x2', '\x2', '\x3', '\x39', ';', '\x3', '\x2', '\x2', '\x2', 
		':', '\x1C', '\x3', '\x2', '\x2', '\x2', ':', '\x1F', '\x3', '\x2', '\x2', 
		'\x2', ':', '\"', '\x3', '\x2', '\x2', '\x2', ':', '%', '\x3', '\x2', 
		'\x2', '\x2', ':', '(', '\x3', '\x2', '\x2', '\x2', ':', '+', '\x3', '\x2', 
		'\x2', '\x2', ':', '.', '\x3', '\x2', '\x2', '\x2', ':', '\x31', '\x3', 
		'\x2', '\x2', '\x2', ':', '\x34', '\x3', '\x2', '\x2', '\x2', ':', '\x37', 
		'\x3', '\x2', '\x2', '\x2', ';', '\x3', '\x3', '\x2', '\x2', '\x2', '<', 
		'=', '\a', '\x3', '\x2', '\x2', '=', '\x5', '\x3', '\x2', '\x2', '\x2', 
		'>', '?', '\a', '\x4', '\x2', '\x2', '?', '\a', '\x3', '\x2', '\x2', '\x2', 
		'@', '\x41', '\t', '\x2', '\x2', '\x2', '\x41', '\t', '\x3', '\x2', '\x2', 
		'\x2', '\x42', '\x43', '\a', '\b', '\x2', '\x2', '\x43', 'I', '\t', '\x3', 
		'\x2', '\x2', '\x44', '\x45', '\a', '\b', '\x2', '\x2', '\x45', '\x46', 
		'\t', '\x3', '\x2', '\x2', '\x46', 'G', '\a', '\x14', '\x2', '\x2', 'G', 
		'I', '\x5', '\x18', '\r', '\x2', 'H', '\x42', '\x3', '\x2', '\x2', '\x2', 
		'H', '\x44', '\x3', '\x2', '\x2', '\x2', 'I', '\v', '\x3', '\x2', '\x2', 
		'\x2', 'J', 'K', '\a', '\a', '\x2', '\x2', 'K', 'Q', '\t', '\x3', '\x2', 
		'\x2', 'L', 'M', '\a', '\a', '\x2', '\x2', 'M', 'N', '\t', '\x3', '\x2', 
		'\x2', 'N', 'O', '\a', '\x14', '\x2', '\x2', 'O', 'Q', '\x5', '\x1A', 
		'\xE', '\x2', 'P', 'J', '\x3', '\x2', '\x2', '\x2', 'P', 'L', '\x3', '\x2', 
		'\x2', '\x2', 'Q', '\r', '\x3', '\x2', '\x2', '\x2', 'R', 'S', '\a', '\t', 
		'\x2', '\x2', 'S', 'T', '\t', '\x3', '\x2', '\x2', 'T', '[', '\a', '\x16', 
		'\x2', '\x2', 'U', 'V', '\a', '\t', '\x2', '\x2', 'V', 'W', '\t', '\x3', 
		'\x2', '\x2', 'W', 'X', '\a', '\x16', '\x2', '\x2', 'X', 'Y', '\a', '\x14', 
		'\x2', '\x2', 'Y', '[', '\x5', '\x18', '\r', '\x2', 'Z', 'R', '\x3', '\x2', 
		'\x2', '\x2', 'Z', 'U', '\x3', '\x2', '\x2', '\x2', '[', '\xF', '\x3', 
		'\x2', '\x2', '\x2', '\\', ']', '\a', '\n', '\x2', '\x2', ']', '^', '\t', 
		'\x3', '\x2', '\x2', '^', '\x65', '\a', '\x16', '\x2', '\x2', '_', '`', 
		'\a', '\n', '\x2', '\x2', '`', '\x61', '\t', '\x3', '\x2', '\x2', '\x61', 
		'\x62', '\a', '\x16', '\x2', '\x2', '\x62', '\x63', '\a', '\x14', '\x2', 
		'\x2', '\x63', '\x65', '\x5', '\x1A', '\xE', '\x2', '\x64', '\\', '\x3', 
		'\x2', '\x2', '\x2', '\x64', '_', '\x3', '\x2', '\x2', '\x2', '\x65', 
		'\x11', '\x3', '\x2', '\x2', '\x2', '\x66', 'g', '\a', '\v', '\x2', '\x2', 
		'g', 'h', '\a', '\x14', '\x2', '\x2', 'h', 'i', '\a', '\x1A', '\x2', '\x2', 
		'i', '\x13', '\x3', '\x2', '\x2', '\x2', 'j', 'k', '\a', '\f', '\x2', 
		'\x2', 'k', '\x15', '\x3', '\x2', '\x2', '\x2', 'l', 'm', '\a', '\r', 
		'\x2', '\x2', 'm', 'n', '\t', '\x4', '\x2', '\x2', 'n', '\x17', '\x3', 
		'\x2', '\x2', '\x2', 'o', 't', '\t', '\x5', '\x2', '\x2', 'p', 'q', '\t', 
		'\x5', '\x2', '\x2', 'q', 'r', '\a', '\x15', '\x2', '\x2', 'r', 't', '\t', 
		'\x6', '\x2', '\x2', 's', 'o', '\x3', '\x2', '\x2', '\x2', 's', 'p', '\x3', 
		'\x2', '\x2', '\x2', 't', '\x19', '\x3', '\x2', '\x2', '\x2', 'u', 'z', 
		'\t', '\x5', '\x2', '\x2', 'v', 'w', '\t', '\x5', '\x2', '\x2', 'w', 'x', 
		'\a', '\x15', '\x2', '\x2', 'x', 'z', '\t', '\x6', '\x2', '\x2', 'y', 
		'u', '\x3', '\x2', '\x2', '\x2', 'y', 'v', '\x3', '\x2', '\x2', '\x2', 
		'z', '\x1B', '\x3', '\x2', '\x2', '\x2', '\t', ':', 'H', 'P', 'Z', '\x64', 
		's', 'y',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace ProtocolParser.Keysight34465A
